// Code generated by counterfeiter. DO NOT EDIT.
package appfakes

import (
	"sync"
)

type FakeProcessedLineTracker struct {
	GetLastProcessedLineStub        func() (int, error)
	getLastProcessedLineMutex       sync.RWMutex
	getLastProcessedLineArgsForCall []struct {
	}
	getLastProcessedLineReturns struct {
		result1 int
		result2 error
	}
	getLastProcessedLineReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	UpdateLastProcessedLineStub        func(int) error
	updateLastProcessedLineMutex       sync.RWMutex
	updateLastProcessedLineArgsForCall []struct {
		arg1 int
	}
	updateLastProcessedLineReturns struct {
		result1 error
	}
	updateLastProcessedLineReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProcessedLineTracker) GetLastProcessedLine() (int, error) {
	fake.getLastProcessedLineMutex.Lock()
	ret, specificReturn := fake.getLastProcessedLineReturnsOnCall[len(fake.getLastProcessedLineArgsForCall)]
	fake.getLastProcessedLineArgsForCall = append(fake.getLastProcessedLineArgsForCall, struct {
	}{})
	stub := fake.GetLastProcessedLineStub
	fakeReturns := fake.getLastProcessedLineReturns
	fake.recordInvocation("GetLastProcessedLine", []interface{}{})
	fake.getLastProcessedLineMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProcessedLineTracker) GetLastProcessedLineCallCount() int {
	fake.getLastProcessedLineMutex.RLock()
	defer fake.getLastProcessedLineMutex.RUnlock()
	return len(fake.getLastProcessedLineArgsForCall)
}

func (fake *FakeProcessedLineTracker) GetLastProcessedLineCalls(stub func() (int, error)) {
	fake.getLastProcessedLineMutex.Lock()
	defer fake.getLastProcessedLineMutex.Unlock()
	fake.GetLastProcessedLineStub = stub
}

func (fake *FakeProcessedLineTracker) GetLastProcessedLineReturns(result1 int, result2 error) {
	fake.getLastProcessedLineMutex.Lock()
	defer fake.getLastProcessedLineMutex.Unlock()
	fake.GetLastProcessedLineStub = nil
	fake.getLastProcessedLineReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessedLineTracker) GetLastProcessedLineReturnsOnCall(i int, result1 int, result2 error) {
	fake.getLastProcessedLineMutex.Lock()
	defer fake.getLastProcessedLineMutex.Unlock()
	fake.GetLastProcessedLineStub = nil
	if fake.getLastProcessedLineReturnsOnCall == nil {
		fake.getLastProcessedLineReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.getLastProcessedLineReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessedLineTracker) UpdateLastProcessedLine(arg1 int) error {
	fake.updateLastProcessedLineMutex.Lock()
	ret, specificReturn := fake.updateLastProcessedLineReturnsOnCall[len(fake.updateLastProcessedLineArgsForCall)]
	fake.updateLastProcessedLineArgsForCall = append(fake.updateLastProcessedLineArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.UpdateLastProcessedLineStub
	fakeReturns := fake.updateLastProcessedLineReturns
	fake.recordInvocation("UpdateLastProcessedLine", []interface{}{arg1})
	fake.updateLastProcessedLineMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProcessedLineTracker) UpdateLastProcessedLineCallCount() int {
	fake.updateLastProcessedLineMutex.RLock()
	defer fake.updateLastProcessedLineMutex.RUnlock()
	return len(fake.updateLastProcessedLineArgsForCall)
}

func (fake *FakeProcessedLineTracker) UpdateLastProcessedLineCalls(stub func(int) error) {
	fake.updateLastProcessedLineMutex.Lock()
	defer fake.updateLastProcessedLineMutex.Unlock()
	fake.UpdateLastProcessedLineStub = stub
}

func (fake *FakeProcessedLineTracker) UpdateLastProcessedLineArgsForCall(i int) int {
	fake.updateLastProcessedLineMutex.RLock()
	defer fake.updateLastProcessedLineMutex.RUnlock()
	argsForCall := fake.updateLastProcessedLineArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeProcessedLineTracker) UpdateLastProcessedLineReturns(result1 error) {
	fake.updateLastProcessedLineMutex.Lock()
	defer fake.updateLastProcessedLineMutex.Unlock()
	fake.UpdateLastProcessedLineStub = nil
	fake.updateLastProcessedLineReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProcessedLineTracker) UpdateLastProcessedLineReturnsOnCall(i int, result1 error) {
	fake.updateLastProcessedLineMutex.Lock()
	defer fake.updateLastProcessedLineMutex.Unlock()
	fake.UpdateLastProcessedLineStub = nil
	if fake.updateLastProcessedLineReturnsOnCall == nil {
		fake.updateLastProcessedLineReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateLastProcessedLineReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProcessedLineTracker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getLastProcessedLineMutex.RLock()
	defer fake.getLastProcessedLineMutex.RUnlock()
	fake.updateLastProcessedLineMutex.RLock()
	defer fake.updateLastProcessedLineMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProcessedLineTracker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
